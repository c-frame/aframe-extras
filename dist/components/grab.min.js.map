{"version":3,"file":"components/grab.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,KAAM,KCATC,OAAOC,kBAAkB,OAAQ,CAC/BC,KAAM,WACJC,KAAKC,OAASD,KAAKE,GAAGC,QAAQC,QAAQC,QAEtCL,KAAKM,cAAgB,UAErBN,KAAKO,UAAW,EAChBP,KAAKQ,MAA8C,KACnDR,KAAKK,QAA8CL,KAAKE,GAAGC,QAAQC,QAAQC,QAC3EL,KAAKS,WAA8C,KAGnDT,KAAKU,MAAQV,KAAKU,MAAMC,KAAKX,MAC7BA,KAAKY,WAAaZ,KAAKY,WAAWD,KAAKX,MACvCA,KAAKa,YAAcb,KAAKa,YAAYF,KAAKX,KAC3C,EAEAc,KAAM,WACJ,MAAMZ,EAAKF,KAAKE,GAChBA,EAAGa,iBAAiB,MAAOf,KAAKU,OAChCR,EAAGa,iBAAiB,WAAYf,KAAKa,aACrCX,EAAGa,iBAAiB,SAAUf,KAAKY,YACnCV,EAAGa,iBAAiB,eAAgBf,KAAKa,aACzCX,EAAGa,iBAAiB,aAAcf,KAAKY,YACvCV,EAAGa,iBAAiB,cAAef,KAAKa,aACxCX,EAAGa,iBAAiB,YAAaf,KAAKY,WACxC,EAEAI,MAAO,WACL,MAAMd,EAAKF,KAAKE,GAChBA,EAAGe,oBAAoB,MAAOjB,KAAKU,OACnCR,EAAGe,oBAAoB,WAAYjB,KAAKa,aACxCX,EAAGe,oBAAoB,SAAUjB,KAAKY,YACtCV,EAAGe,oBAAoB,eAAgBjB,KAAKa,aAC5CX,EAAGe,oBAAoB,aAAcjB,KAAKY,YAC1CV,EAAGe,oBAAoB,cAAejB,KAAKa,aAC3CX,EAAGe,oBAAoB,YAAajB,KAAKY,WAC3C,EAEAC,YAAa,WACXb,KAAKO,UAAW,CAClB,EAEAK,WAAY,WACV,MAAMJ,EAAQR,KAAKQ,MACnBR,KAAKO,UAAW,EACXC,IACLA,EAAMU,YAAYlB,KAAKM,eACvBN,KAAKQ,WAAQW,EACbnB,KAAKC,OAAOmB,iBAAiBpB,KAAKS,YAClCT,KAAKS,WAAa,KACpB,EAEAC,MAAO,SAAUW,GACf,MAAMb,EAAQa,EAAIC,OAAOpB,GAIrBM,EAAMe,GAAGvB,KAAKM,iBAAmBN,KAAKO,UAAYP,KAAKQ,QAC3DA,EAAMgB,SAASxB,KAAKM,eACpBN,KAAKQ,MAAQA,EACbR,KAAKS,WAAa,IAAIgB,OAAOC,eAAe1B,KAAKE,GAAGyB,KAAMnB,EAAMmB,MAChE3B,KAAKC,OAAO2B,cAAc5B,KAAKS,YACjC,I","sources":["webpack://aframe-extras/webpack/universalModuleDefinition","webpack://aframe-extras/./src/misc/grab.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nAFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n\n    this.GRABBED_STATE = 'grabbed';\n\n    this.grabbing = false;\n    this.hitEl =      /** @type {AFRAME.Element}    */ null;\n    this.physics =    /** @type {AFRAME.System}     */ this.el.sceneEl.systems.physics;\n    this.constraint = /** @type {CANNON.Constraint} */ null;\n\n    // Bind event handlers\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n    if (!hitEl) { return; }\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n\n  onHit: function (evt) {\n    const hitEl = evt.detail.el;\n    // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n    if (hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) { return; }\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});\n"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","registerComponent","init","this","system","el","sceneEl","systems","physics","GRABBED_STATE","grabbing","hitEl","constraint","onHit","bind","onGripOpen","onGripClose","play","addEventListener","pause","removeEventListener","removeState","undefined","removeConstraint","evt","detail","is","addState","CANNON","LockConstraint","body","addConstraint"],"sourceRoot":""}