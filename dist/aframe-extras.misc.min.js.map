{"version":3,"file":"aframe-extras.misc.min.js","mappings":"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","sources":["webpack://aframe-extras/webpack/universalModuleDefinition","webpack://aframe-extras/./src/misc/checkpoint.js","webpack://aframe-extras/./src/misc/sphere-collider.js","webpack://aframe-extras/./src/misc/grab.js","webpack://aframe-extras/./src/misc/normal-material.js","webpack://aframe-extras/./src/misc/cube-env-map.js","webpack://aframe-extras/webpack/bootstrap","webpack://aframe-extras/webpack/runtime/compat get default export","webpack://aframe-extras/webpack/runtime/define property getters","webpack://aframe-extras/webpack/runtime/hasOwnProperty shorthand","webpack://aframe-extras/webpack/runtime/make namespace object"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","AFRAME.registerComponent('checkpoint', {\n  schema: {\n    offset: {default: {x: 0, y: 0, z: 0}, type: 'vec3'}\n  },\n\n  init: function () {\n    this.active = false;\n    this.targetEl = null;\n    this.fire = this.fire.bind(this);\n    this.offset = new THREE.Vector3();\n  },\n\n  update: function () {\n    this.offset.copy(this.data.offset);\n  },\n\n  play: function () { this.el.addEventListener('click', this.fire); },\n  pause: function () { this.el.removeEventListener('click', this.fire); },\n  remove: function () { this.pause(); },\n\n  fire: function () {\n    const targetEl = this.el.sceneEl.querySelector('[checkpoint-controls]');\n    if (!targetEl) {\n      throw new Error('No `checkpoint-controls` component found.');\n    }\n    targetEl.components['checkpoint-controls'].setCheckpoint(this.el);\n  },\n\n  getOffset: function () {\n    return this.offset.copy(this.data.offset);\n  }\n});\n","/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Implement bounding sphere collision detection for entities with a mesh.\n * Sets the specified state on the intersected entities.\n *\n * @property {string} objects - Selector of the entities to test for collision.\n * @property {string} state - State to set on collided entities.\n *\n */\nAFRAME.registerComponent('sphere-collider', {\n  schema: {\n    enabled: {default: true},\n    interval: {default: 80},\n    objects: {default: ''},\n    state: {default: 'collided'},\n    radius: {default: 0.05},\n    watch: {default: true}\n  },\n\n  init: function () {\n    /** @type {MutationObserver} */\n    this.observer = null;\n    /** @type {Array<Element>} Elements to watch for collisions. */\n    this.els = [];\n    /** @type {Array<Element>} Elements currently in collision state. */\n    this.collisions = [];\n    this.prevCheckTime = undefined;\n\n    this.eventDetail = {};\n    this.handleHit = this.handleHit.bind(this);\n    this.handleHitEnd = this.handleHitEnd.bind(this);\n  },\n\n  play: function () {\n    const sceneEl = this.el.sceneEl;\n\n    if (this.data.watch) {\n      this.observer = new MutationObserver(this.update.bind(this, null));\n      this.observer.observe(sceneEl, {childList: true, subtree: true});\n    }\n  },\n\n  pause: function () {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  },\n\n  /**\n   * Update list of entities to test for collision.\n   */\n  update: function () {\n    const data = this.data;\n    let objectEls;\n\n    // Push entities into list of els to intersect.\n    if (data.objects) {\n      objectEls = this.el.sceneEl.querySelectorAll(data.objects);\n    } else {\n      // If objects not defined, intersect with everything.\n      objectEls = this.el.sceneEl.children;\n    }\n    // Convert from NodeList to Array\n    this.els = Array.prototype.slice.call(objectEls);\n  },\n\n  tick: (function () {\n    const position = new THREE.Vector3(),\n        meshPosition = new THREE.Vector3(),\n        colliderScale = new THREE.Vector3(),\n        size = new THREE.Vector3(),\n        box = new THREE.Box3(),\n        collisions = [],\n        distanceMap = new Map();\n    return function (time) {\n      if (!this.data.enabled) { return; }\n\n      // Only check for intersection if interval time has passed.\n      const prevCheckTime = this.prevCheckTime;\n      if (prevCheckTime && (time - prevCheckTime < this.data.interval)) { return; }\n      // Update check time.\n      this.prevCheckTime = time;\n\n      const el = this.el,\n          data = this.data,\n          mesh = el.getObject3D('mesh');\n      let colliderRadius;\n\n      if (!mesh) { return; }\n\n      collisions.length = 0;\n      distanceMap.clear();\n      el.object3D.getWorldPosition(position);\n      el.object3D.getWorldScale(colliderScale);\n      colliderRadius = data.radius * scaleFactor(colliderScale);\n      // Update collision list.\n      this.els.forEach(intersect);\n\n      // Emit events and add collision states, in order of distance.\n      collisions\n        .sort((a, b) => distanceMap.get(a) > distanceMap.get(b) ? 1 : -1)\n        .forEach(this.handleHit);\n\n      // Remove collision state from other elements.\n      this.collisions\n        .filter((el) => !distanceMap.has(el))\n        .forEach(this.handleHitEnd);\n\n      // Store new collisions\n      copyArray(this.collisions, collisions);\n\n      // Bounding sphere collision detection\n      function intersect (el) {\n        let radius, mesh, distance, extent;\n\n        if (!el.isEntity) { return; }\n\n        mesh = el.getObject3D('mesh');\n\n        if (!mesh) { return; }\n\n        box.setFromObject(mesh).getSize(size);\n        extent = Math.max(size.x, size.y, size.z) / 2;\n        radius = Math.sqrt(2 * extent * extent);\n        box.getCenter(meshPosition);\n\n        if (!radius) { return; }\n\n        distance = position.distanceTo(meshPosition);\n        if (distance < radius + colliderRadius) {\n          collisions.push(el);\n          distanceMap.set(el, distance);\n        }\n      }\n      // use max of scale factors to maintain bounding sphere collision\n      function scaleFactor (scaleVec) {\n        return Math.max(scaleVec.x, scaleVec.y, scaleVec.z);\n      }\n    };\n  })(),\n\n  handleHit: function (targetEl) {\n    targetEl.emit('hit');\n    targetEl.addState(this.data.state);\n    this.eventDetail.el = targetEl;\n    this.el.emit('hit', this.eventDetail);\n  },\n  handleHitEnd: function (targetEl) {\n    targetEl.emit('hitend');\n    targetEl.removeState(this.data.state);\n    this.eventDetail.el = targetEl;\n    this.el.emit('hitend', this.eventDetail);\n  }\n});\n\nfunction copyArray (dest, source) {\n  dest.length = 0;\n  for (let i = 0; i < source.length; i++) { dest[i] = source[i]; }\n}\n","/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nAFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n\n    this.GRABBED_STATE = 'grabbed';\n\n    this.grabbing = false;\n    this.hitEl =      /** @type {AFRAME.Element}    */ null;\n    this.physics =    /** @type {AFRAME.System}     */ this.el.sceneEl.systems.physics;\n    this.constraint = /** @type {CANNON.Constraint} */ null;\n\n    // Bind event handlers\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n    if (!hitEl) { return; }\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n\n  onHit: function (evt) {\n    const hitEl = evt.detail.el;\n    // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n    if (hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) { return; }\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});\n","/**\n * Recursively applies a MeshNormalMaterial to the entity, such that\n * face colors are determined by their orientation. Helpful for\n * debugging geometry\n */\nAFRAME.registerComponent('normal-material', {\n  init: function () {\n    this.material = new THREE.MeshNormalMaterial({flatShading: true});\n    this.applyMaterial = this.applyMaterial.bind(this);\n    this.el.addEventListener('object3dset', this.applyMaterial);\n    this.applyMaterial();\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.applyMaterial);\n  },\n\n  applyMaterial: function () {\n    this.el.object3D.traverse((node) => {\n      if (node.isMesh) node.material = this.material;\n    });\n  }\n});\n","/**\n * @param  {Array<THREE.Material>|THREE.Material} material\n * @return {Array<THREE.Material>}\n */\nfunction ensureMaterialArray (material) {\n  if (!material) {\n    return [];\n  } else if (Array.isArray(material)) {\n    return material;\n  } else if (material.materials) {\n    return material.materials;\n  } else {\n    return [material];\n  }\n}\n\n/**\n * @param  {THREE.Object3D} mesh\n * @param  {Array<string>} materialNames\n * @param  {THREE.Texture} envMap\n * @param  {number} reflectivity  [description]\n */\nfunction applyEnvMap (mesh, materialNames, envMap, reflectivity) {\n  if (!mesh) return;\n\n  materialNames = materialNames || [];\n\n  mesh.traverse((node) => {\n\n    if (!node.isMesh) return;\n\n    const meshMaterials = ensureMaterialArray(node.material);\n\n    meshMaterials.forEach((material) => {\n\n      if (material && !('envMap' in material)) return;\n      if (materialNames.length && materialNames.indexOf(material.name) === -1) return;\n\n      material.envMap = envMap;\n      material.reflectivity = reflectivity;\n      material.needsUpdate = true;\n\n    });\n\n  });\n}\n\n/**\n * Specifies an envMap on an entity, without replacing any existing material\n * properties.\n */\nAFRAME.registerComponent('cube-env-map', {\n  multiple: true,\n\n  schema: {\n    path: {default: ''},\n    extension: {default: 'jpg', oneOf: ['jpg', 'png']},\n    enableBackground: {default: false},\n    reflectivity: {default: 1, min: 0, max: 1},\n    materials: {default: []}\n  },\n\n  init: function () {\n    const data = this.data;\n\n    this.texture = new THREE.CubeTextureLoader().load([\n      data.path + 'posx.' + data.extension, data.path + 'negx.' + data.extension,\n      data.path + 'posy.' + data.extension, data.path + 'negy.' + data.extension,\n      data.path + 'posz.' + data.extension, data.path + 'negz.' + data.extension\n    ]);\n    this.texture.format = THREE.RGBAFormat;\n\n    this.object3dsetHandler = () => {\n      const mesh = this.el.getObject3D('mesh');\n      const data = this.data;\n      applyEnvMap(mesh, data.materials, this.texture, data.reflectivity);\n    };\n\n    this.object3dsetHandler();\n    this.el.addEventListener('object3dset', this.object3dsetHandler);\n    \n  },\n\n  update: function (oldData) {\n    const data = this.data;\n    const mesh = this.el.getObject3D('mesh');\n\n    let addedMaterialNames = [];\n    let removedMaterialNames = [];\n\n    if (data.materials.length) {\n      if (oldData.materials) {\n        addedMaterialNames = data.materials.filter((name) => !oldData.materials.includes(name));\n        removedMaterialNames = oldData.materials.filter((name) => !data.materials.includes(name));\n      } else {\n        addedMaterialNames = data.materials;\n      }\n    }\n    if (addedMaterialNames.length) {\n      applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity);\n    }\n    if (removedMaterialNames.length) {\n      applyEnvMap(mesh, removedMaterialNames, null, 1);\n    }\n\n    if (oldData.materials && data.reflectivity !== oldData.reflectivity) {\n      const maintainedMaterialNames = data.materials\n        .filter((name) => oldData.materials.includes(name));\n      if (maintainedMaterialNames.length) {\n        applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity);\n      }\n    }\n\n    if (this.data.enableBackground && !oldData.enableBackground) {\n      this.setBackground(this.texture);\n    } else if (!this.data.enableBackground && oldData.enableBackground) {\n      this.setBackground(null);\n    }\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.object3dsetHandler);\n    const mesh = this.el.getObject3D('mesh');\n    const data = this.data;\n\n    applyEnvMap(mesh, data.materials, null, 1);\n    if (data.enableBackground) this.setBackground(null);\n  },\n\n  setBackground: function (texture) {\n    this.el.sceneEl.object3D.background = texture;\n  }\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["root","factory","exports","module","define","amd","a","i","self","AFRAME","registerComponent","schema","offset","default","x","y","z","type","init","this","active","targetEl","fire","bind","THREE","Vector3","update","copy","data","play","el","addEventListener","pause","removeEventListener","remove","sceneEl","querySelector","Error","components","setCheckpoint","getOffset","enabled","interval","objects","state","radius","watch","observer","els","collisions","prevCheckTime","undefined","eventDetail","handleHit","handleHitEnd","MutationObserver","observe","childList","subtree","disconnect","objectEls","querySelectorAll","children","Array","prototype","slice","call","tick","position","meshPosition","colliderScale","size","box","Box3","distanceMap","Map","time","colliderRadius","scaleVec","getObject3D","length","clear","object3D","getWorldPosition","getWorldScale","Math","max","forEach","mesh","distance","extent","isEntity","setFromObject","getSize","sqrt","getCenter","distanceTo","push","set","sort","b","get","filter","has","dest","source","copyArray","emit","addState","removeState","system","systems","physics","GRABBED_STATE","grabbing","hitEl","constraint","onHit","onGripOpen","onGripClose","removeConstraint","evt","detail","is","CANNON","LockConstraint","body","addConstraint","material","MeshNormalMaterial","flatShading","applyMaterial","traverse","node","isMesh","applyEnvMap","materialNames","envMap","reflectivity","isArray","materials","indexOf","name","needsUpdate","multiple","path","extension","oneOf","enableBackground","min","texture","CubeTextureLoader","load","format","RGBAFormat","object3dsetHandler","oldData","addedMaterialNames","removedMaterialNames","includes","maintainedMaterialNames","setBackground","background","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","obj","prop","hasOwnProperty","r","Symbol","toStringTag","value"],"sourceRoot":""}